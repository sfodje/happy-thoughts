{"version":3,"sources":["logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","activeItem","handleItemClick","e","_ref","name","_this","setState","this","react_default","a","createElement","Grid","stackable","stretched","textAlign","Row","Column","width","Menu","pointing","secondary","vertical","Header","Image","src","logo","Item","content","className","active","onClick","Message","hidden","positive","info","header","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6TCMnBC,6MAEnBC,MAAQ,CAAEC,WAAY,UAEtBC,gBAAkB,SAACC,EAADC,GAAA,IAAMC,EAAND,EAAMC,KAAN,OAAiBC,EAAKC,SAAS,CAAEN,WAAYI,6EAEtD,IACCJ,EAAeO,KAAKR,MAApBC,WAER,OACEQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,WAAS,EAACC,UAAU,QAClCN,EAAAC,EAAAC,cAACC,EAAA,EAAKI,IAAN,KACEP,EAAAC,EAAAC,cAACC,EAAA,EAAKK,OAAN,CAAaC,MAAM,KACjBT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,UAAQ,EAACC,WAAS,EAACC,UAAQ,GAC/Bb,EAAAC,EAAAC,cAACQ,EAAA,EAAKI,OAAN,KAAad,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,IAAKC,OACzBjB,EAAAC,EAAAC,cAACQ,EAAA,EAAKQ,KAAN,CAAWC,QAASnB,EAAAC,EAAAC,cAAA,QAAMkB,UAAU,cAAhB,QAA0CxB,KAAK,OAAOyB,OAAuB,SAAf7B,EAAuB8B,QAASvB,KAAKN,kBACvHO,EAAAC,EAAAC,cAACQ,EAAA,EAAKQ,KAAN,CAAWtB,KAAK,mBAAmByB,OAAuB,qBAAf7B,EAAmC8B,QAASvB,KAAKN,kBAC5FO,EAAAC,EAAAC,cAACQ,EAAA,EAAKQ,KAAN,CAAWtB,KAAK,YAAYyB,OAAuB,cAAf7B,EAA4B8B,QAASvB,KAAKN,kBAC9EO,EAAAC,EAAAC,cAACQ,EAAA,EAAKQ,KAAN,CAAWtB,KAAK,6BAA6ByB,OAAuB,+BAAf7B,EAA6C8B,QAASvB,KAAKN,kBAChHO,EAAAC,EAAAC,cAACQ,EAAA,EAAKQ,KAAN,CAAWtB,KAAK,aAAayB,OAAuB,eAAf7B,EAA6B8B,QAASvB,KAAKN,kBAChFO,EAAAC,EAAAC,cAACQ,EAAA,EAAKQ,KAAN,CAAWtB,KAAK,oBAAoByB,OAAuB,sBAAf7B,EAAoC8B,QAASvB,KAAKN,oBAGlGO,EAAAC,EAAAC,cAACC,EAAA,EAAKK,OAAN,CAAaC,MAAM,KAAKW,UAAU,WAChCpB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAASC,OAAuB,SAAfhC,EAAuBiC,UAAQ,EAACC,MAAI,EAACC,OAAO,QAA7D,iBAGA3B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAASC,OAAuB,qBAAfhC,EAAmCiC,UAAQ,EAACC,MAAI,EAACC,OAAO,QAAzE,0CAGA3B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAASC,OAAuB,cAAfhC,EAA4BiC,UAAQ,EAACC,MAAI,EAACC,OAAO,QAAlE,6BAGA3B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAASC,OAAuB,+BAAfhC,EAA6CiC,UAAQ,EAACC,MAAI,EAACC,OAAO,QAAnF,+BAGA3B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAASC,OAAuB,eAAfhC,EAA6BiC,UAAQ,EAACC,MAAI,EAACC,OAAO,QAAnE,eAGA3B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAASC,OAAuB,sBAAfhC,EAAoCiC,UAAQ,EAACC,MAAI,EAACC,OAAO,QAA1E,gCAvCqBC,aCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.85f23f1a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a9049bfd.png\";","import React, { Component } from 'react';\nimport { Menu, Grid, Message, Image } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport logo from './logo.png';\n\nexport default class App extends Component {\n\n  state = { activeItem: 'Home' }\n\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n  render() {\n    const { activeItem } = this.state;\n\n    return (\n      <Grid stackable stretched textAlign='left'>\n        <Grid.Row>\n          <Grid.Column width='4'>\n            <Menu pointing secondary vertical >\n              <Menu.Header><Image src={logo} /></Menu.Header>\n              <Menu.Item content={<span className='menu-items'>Home</span>} name='Home' active={activeItem === 'Home'} onClick={this.handleItemClick} />\n              <Menu.Item name='Find a Therapist' active={activeItem === 'Find a Therapist'} onClick={this.handleItemClick} />\n              <Menu.Item name='Chat Room' active={activeItem === 'Chat Room'} onClick={this.handleItemClick} />\n              <Menu.Item name='Learn more about self-harm' active={activeItem === 'Learn more about self-harm'} onClick={this.handleItemClick} />\n              <Menu.Item name='Fast Facts' active={activeItem === 'Fast Facts'} onClick={this.handleItemClick} />\n              <Menu.Item name='Coping with urges' active={activeItem === 'Coping with urges'} onClick={this.handleItemClick} />\n            </Menu>\n          </Grid.Column>\n          <Grid.Column width='12' className='content' >\n            <Message hidden={activeItem !== 'Home'} positive info header='Home'>\n              Welcome Home.\n            </Message>\n            <Message hidden={activeItem !== 'Find a Therapist'} positive info header='Home'>\n              Let us help you find a good therapist.\n            </Message>\n            <Message hidden={activeItem !== 'Chat Room'} positive info header='Home'>\n              Welcome to our chat room.\n            </Message>\n            <Message hidden={activeItem !== 'Learn more about self-harm'} positive info header='Home'>\n              Learn more about self-harm.\n            </Message>\n            <Message hidden={activeItem !== 'Fast Facts'} positive info header='Home'>\n              Fast facts!\n            </Message>\n            <Message hidden={activeItem !== 'Coping with urges'} positive info header='Home'>\n              Coping with urges.\n            </Message>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}